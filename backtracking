# board can be whatever, but the program will check to see if its valid or not so put in a valid board.
board = [
    [7,8,0,4,0,0,1,2,0],
    [6,0,0,0,7,5,0,0,9],
    [0,0,0,6,0,1,0,7,8],
    [0,0,7,0,4,0,2,6,0],
    [0,0,1,0,5,0,9,3,0],
    [9,0,4,0,6,0,0,0,5],
    [0,7,0,3,0,0,0,1,2],
    [1,2,0,0,0,7,4,0,0],
    [0,4,9,2,0,6,0,0,7]
]

def solve(box):
    find = find_empty(box)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1,10):
        if valid(box, i, (row, col)):
            box[row][col] = i

            if solve(box):
                return True

            box[row][col] = 0

    return False





def checkboard(box, num, pos):
  # check rows
  for i in range(len(box[0])):
      if box[box[0]][i] == num and pos[1] != i:
          return False
  # check column
  for i in range(len(box)):
      if box[i][pos[i]] == num and pos[0] != i:
          return False

  #check box

  boxx = pos[1]//3 
  boxy = pos[0]//3  

  for i in range(boxy*, boxy*3+3):
      for j in range(boxx*, boxx*3+3):
          if box[i][j] == num and (i,j) != pos:
              return False
return True


def print_board(box):
  
   for i in range(len(box)):
        if i % 3 == 0 and i ! = 0:
            print("- - - - - - - - - - - - - ")

        for j in range(len(box[0])):
            if j % 3 == 0 and j != 0:
                  print(" | ", end ="")

                if j == 8:
                  print (box[i][j])
                else:
                  print(str(box[i][j]) + " ", end = "")


def find_empty(box):
  for i in range(len(box)):
      for j in range(len(box[0])):
          if box[i][j] == 0:
                return (i,j) # (rows, coloums)
 return None

print_board(board)
solve(board)
print("__________________________________")
print_board(board)
